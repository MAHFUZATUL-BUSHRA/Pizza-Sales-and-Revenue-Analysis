-- CS1 : Extract only the table information

DESCRIBE ORDER_DETAILS;
DESCRIBE ORDERS;
DESCRIBE pizza_types;
DESCRIBE pizzas;

SELECT * FROM ORDERS;
SELECT * FROM ORDER_DETAILS;
SELECT * FROM PIZZAS;
SELECT * FROM PIZZA_TYPES;

-- CS2 : Total Revenue from All Orders

WITH CTE AS
(SELECT 
    O.PIZZA_ID, O.QUANTITY, P.PRICE, QUANTITY * PRICE AS REVENUE
FROM
    ORDER_DETAILS AS O
        LEFT JOIN
    PIZZAS AS P ON P.PIZZA_ID = O.PIZZA_ID)

SELECT 
    ROUND(SUM(REVENUE), 2)
FROM
    CTE;

-- WHERE QUANTITY IS MORE THAN 1

WITH CTE AS
(SELECT 
    O.PIZZA_ID, O.QUANTITY, P.PRICE, QUANTITY * PRICE AS REVENUE
FROM
    ORDER_DETAILS AS O
        LEFT JOIN
    PIZZAS AS P ON P.PIZZA_ID = O.PIZZA_ID)

SELECT 
    *
FROM
    CTE
WHERE
    PRICE <> REVENUE;

-- CS2 : REVENUE BY PIZZA SIZE

SELECT DISTINCT SIZE FROM PIZZAS;
SELECT 
    P.SIZE, ROUND(SUM(O.QUANTITY * P.PRICE), 1) AS REVENUE
FROM
    PIZZAS AS P
        LEFT JOIN
    ORDER_DETAILS AS O ON P.PIZZA_ID = O.PIZZA_ID
GROUP BY 1;

-- CS3 : COUNT ORDERS BY DAY

 SELECT COUNT(DISTINCT DATE) FROM ORDERS;
 
SELECT 
    DATE, COUNT(QUANTITY) AS TOTAL_ORDERS
FROM
    ORDERS AS O
        LEFT JOIN
    ORDER_DETAILS AS OD ON O.ORDER_ID = OD.ORDER_ID
GROUP BY DATE;

 -- tOP 5
 	WITH CTE AS (SELECT
        DATE, 
        COUNT(ORDER_ID) AS DAILY_SALES,
        RANK() OVER (ORDER BY COUNT(ORDER_ID) DESC) AS RN
        FROM 
        ORDERS
        GROUP BY 1)
        
        SELECT * 
        FROM CTE
        WHERE RN <= 5;
        
        
 -- CS4 : COUNT OF ORDERS IN DECEMBER

SELECT 
    SUM(TOTAL_ORDERS) AS G
FROM
    (SELECT 
        DATE, COUNT(ORDER_ID) AS TOTAL_ORDERS
    FROM
        ORDERS
    WHERE
        STR_TO_DATE(DATE, '%Y-%m-%d') BETWEEN '2015-12-01' AND '2015-12-30'
    GROUP BY 1) X;

-- CS5 : MONTHLY PIZZA SALES

 WITH CT AS (SELECT 
    DATE, COUNT(ORDER_ID) AS SALES
FROM
    ORDERS
GROUP BY 1)
SELECT 
    EXTRACT(MONTH FROM DATE) AS MONTH, SUM(SALES) AS TOTAL_SALES
FROM
    CT
GROUP BY MONTH
ORDER BY 2 DESC;
 
 WITH CTE AS (
    SELECT 
    STR_TO_DATE(date, '%Y-%m-%d') AS DAYS, ORDER_ID, TIME
FROM
    ORDERS) 
	SELECT 
    EXTRACT(MONTH FROM DAYS) AS MONTH,
    COUNT(ORDER_ID) AS TOTAL_ORDERS
FROM
    CTE
GROUP BY 1
ORDER BY 2 DESC;

-- CS5 : ORDER BY TIME OF A DAY (MORNING, AFTERNOON, EVENING)
WITH cte AS
(SELECT 
	Hour(STR_TO_DATE(TIME, '%H:%i:%s')) as Day_Time, ORDER_ID  FROM ORDERS)
SELECT 
CASE
	 WHEN Day_Time BETWEEN 0 AND 11 THEN 'MORNING'
	 WHEN Day_Time BETWEEN 12 AND 17 THEN 'AFTERNOON'
	 WHEN Day_Time BETWEEN 18 AND 23 THEN 'EVENING'
 END AS DAY, COUNT(ORDER_ID) AS TOTAL_ORDERS
FROM cte
GROUP BY DAY;

-- IDENTIFY THE HIGHEST-PRICED PIZZA.
SELECT 
    PT.NAME, P.PRICE
FROM
    PIZZA_TYPES AS PT
        LEFT JOIN
    PIZZAS AS P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID
ORDER BY P.PRICE DESC
LIMIT 1;

-- IDENTIFY THE MOST COMMON PIZZA SIZE ORDERED.
SELECT 
    P.SIZE, COUNT(*) AS PIZZA_ORDERED
FROM
    PIZZAS AS P
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY SIZE
ORDER BY 2 DESC;

-- LIST THE TOP 5 MOST ORDERED PIZZA TYPES ALONG WITH THEIR QUANTITIES.
SELECT 
    PT.NAME, SUM(QUANTITY) AS ORDERED_QUANTITY
FROM
    PIZZA_TYPES AS PT
        LEFT JOIN
    PIZZAS AS P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;
    
 -- Join the necessary tables to find the total quantity of each pizza category ordered.
 
SELECT 
    PT.CATEGORY, SUM(QUANTITY) AS TOTAL_QUANTITY_ORDERED
FROM
    PIZZA_TYPES AS PT
        LEFT JOIN
    PIZZAS AS P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY 1
ORDER BY 2 DESC;

-- Determine the distribution of orders by hour of the day

SELECT 
    HOUR(TIME) AS HOURS, COUNT(ORDER_ID) AS ORDERS
FROM
    ORDERS
GROUP BY 1
ORDER BY 1 ASC;

-- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    PT.NAME, SUM(QUANTITY * PRICE) AS REVENUE
FROM
    PIZZA_TYPES AS PT
        LEFT JOIN
    PIZZAS AS P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY 1
ORDER BY 2 DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.

SELECT 
PT.CATEGORY, 
CONCAT(ROUND((SUM(OD.QUANTITY*P.PRICE))/
(SELECT 
   SUM(OD.QUANTITY*P.PRICE) AS TOTAL_REVENUE 
FROM
    PIZZA_TYPES AS PT
        LEFT JOIN
    PIZZAS AS P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID)*100,2),'%') AS PERCENTAGE
 FROM
    PIZZA_TYPES AS PT
        LEFT JOIN
    PIZZAS AS P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
    GROUP BY 1
    ORDER BY PERCENTAGE DESC;
    
-- Analyze the cumulative revenue generated over time.
SELECT 
    O.DATE, ROUND(SUM(QUANTITY * PRICE), 2) AS REV
FROM
    PIZZAS AS P
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
        LEFT JOIN
    ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY 1
ORDER BY 1;
-- 
SELECT
 DATE,REV, SUM(REV) OVER(ORDER BY DATE) AS CUM_DATE
 FROM
(SELECT 
    O.DATE, ROUND(SUM(QUANTITY * PRICE), 2) AS REV
FROM
    PIZZAS AS P
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
        LEFT JOIN
    ORDERS AS O ON O.ORDER_ID = OD.ORDER_ID
GROUP BY 1)T 
    WHERE DATE IS NOT NULL;
    
  -- Determine the top 3 most ordered pizza types based on revenue for each pizza category.
 
 SELECT CATEGORY ,NAME, REVENUE, RNK 
 FROM
 (SELECT  
	 CATEGORY,NAME,REVENUE,
	 RANK() OVER (PARTITION BY CATEGORY ORDER BY REVENUE DESC) AS RNK
 FROM
 (SELECT 
    PT.CATEGORY,
    PT.NAME,
    ROUND(SUM(P.PRICE * OD.QUANTITY), 2) AS REVENUE
FROM
    PIZZA_TYPES AS PT
        LEFT JOIN
    PIZZAS AS P ON PT.PIZZA_TYPE_ID = P.PIZZA_TYPE_ID
        LEFT JOIN
    order_details AS OD ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY 1 , 2)X) AS R
    WHERE RNK<=3
    
